package multiply;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

class MatVecKernel extends Kernel {

	final DFEType valType = dfeFloat(8, 24);

	MatVecKernel(KernelParameters parameters, int maxMatSize, int pipeCount) {
		super(parameters);

		final DFEVectorType<DFEVar> vecType = new DFEVectorType<DFEVar>(valType, pipeCount);

		final int addrBits = MathUtils.bitsToAddress(maxMatSize + 1);
		DFEType addrType = dfeUInt(addrBits);

		DFEVar size = io.scalarInput("size", addrType);

		CounterChain chain = control.count.makeCounterChain();
		DFEVar j = chain.addCounter(size, 1);
		DFEVar i = chain.addCounter(size, pipeCount);

		DFEVector<DFEVar> matA = io.input("matA", vecType);
		DFEVar vecB = io.input("vecB", valType, i === 0);

		DFEVector<DFEVar> carriedSum = vecType.newInstance(this);
		DFEVector<DFEVar> sum = j === 0 ? constant.vect(pipeCount, 0.0) : carriedSum;
		DFEVector<DFEVar> newSum = sum + matA * vecB;
		carriedSum <== stream.offset(newSum, -size.cast(dfeInt(32)) / pipeCount, -maxMatSize, -16);

		io.output("vecC", newSum, vecType, j === size - 1);
	}
}
